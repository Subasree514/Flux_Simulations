import csv
import pandas
from cobra.flux_analysis import (
    single_gene_deletion, single_reaction_deletion, double_gene_deletion,
    double_reaction_deletion)
import os
import xml.etree.ElementTree as etree
import cobra
import numpy as np
from itertools import chain
from cobra.util import solver as sutil
from cobra.core.solution import get_solution
from optlang.symbolics import add, Zero
import pandas as pd
import os
from os.path import join
import matplotlib.pyplot as plt
from cobra.medium import minimal_medium
# Press ⌃R to execute it or replace it with your code.
# Press Double ⇧ to search everywhere for classes, files, tool windows, actions, and settings.
from cobra.flux_analysis import production_envelope
import matplotlib.pyplot as plt
from cobra import Model, Reaction, Metabolite
from cobra.io import read_sbml_model
import matplotlib.pyplot as plt
from cobra.flux_analysis import flux_variability_analysis
from cobra.flux_analysis.variability import find_essential_reactions
# Import data manipulation tools
import pandas as pd
import numpy as np
from cobra.io import load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model

old_model = cobra.io.load_matlab_model(join('/Users/subasrees/Desktop/RSmodule/September 24/Sep 16, 2024/Upload_Final/September 28/New Folder/Plant RS/core_model_new.mat'))
new_model = cobra.io.load_matlab_model(join('/Users/subasrees/Desktop/RSmodule/September 24/Sep 16, 2024/Upload_Final/September 28/New Folder/Plant RS/modelnew_loopless.mat'))
#new_model.add_boundary(new_model.metabolites.HYDROGEN_PEROXIDE[e],type='exchange')
#new_model.add_boundary(old_model.metabolites[0], type="demand")
#old_model.add_metabolites([Metabolite('HYDROGEN_PEROXIDE_e[e]',compartment='e')])
#new_model.add_boundary(new_model.metabolites.get_by_id("HYDROGEN_PEROXIDE[e]"), type="exchange")

## rename the model
core_model=old_model

# Defining the model objective
print(core_model.objective_direction, core_model.objective.expression)
core_model.objective = 'AraCore_Biomass_tx'
## limiting nutrient
#solutions=[]
#for exchange in core_model.exchanges:
#    core_model = cobra.io.load_matlab_model(join('/Users/subasrees/Desktop/RSmodule/September 24/Sep 16, 2024/Upload_Final/September 28/New Folder/Plant RS/core_model_new.mat'))
#    core_model.reactions.get_by_id(exchange.id).bounds = (-1000, 0)
#    solution = core_model.optimize()
#    solution_update=solution.objective_value
#    solutions.append(solution_update)

#for i in range(0,len(solutions)):
#    print(f'{core_model.exchanges[i]}\tfluxes: {solutions[i]}')

#core_model=new_model
with core_model:
    # Re-define the model's objective
    core_model.objective = 'AraCore_Biomass_tx'
    core_model.reactions.get_by_id('NH4_tx').bounds = (-1000, 0)
    core_model.reactions.get_by_id('Nitrate_tx').bounds = (-1000, 3)
    ## Manipulating bounds for exchange reactions - Dark-Night cycle
    core_model.reactions.get_by_id('Photon_tx').bounds = (0, 0)
    core_model.reactions.get_by_id('CO2_tx').bounds = (-1000, 0)
    ## Manipulating bounds for exchange reactions - Light-Day cycle
    #core_model.reactions.get_by_id('Sucrose_tx').bounds = (-1000, 0)
    #core_model.reactions.get_by_id('GLC_tx').bounds = (-1000, 0)
    #core_model.reactions.get_by_id('Photon_tx').bounds = (0, 300)
    # Creating object
    #rubisco = core_model.problem.Constraint(3 * core_model.reactions.get_by_id("RXN_961_p").flux_expression - core_model.reactions.get_by_id("RIBULOSE_BISPHOSPHATE_CARBOXYLASE_RXN_p").flux_expression,lb=0, ub=0,)
    # Adding to model
    #core_model.add_cons_vars([rubisco])
    # Simulation
    #sol = core_model.optimize()
    #total = sol.fluxes["RXN_961_p"] + sol.fluxes["RIBULOSE_BISPHOSPHATE_CARBOXYLASE_RXN_p"]
    #print(core_model.summary(sol))
    #print("O2: {}".format(round(sol.fluxes['RXN_961_p']/total*100,2)))
    #print("CO2 : {}".format(round(sol.fluxes['RIBULOSE_BISPHOSPHATE_CARBOXYLASE_RXN_p']/total*100,2)))
    new_night=core_model
    #print(new_night.objective)
    sol = new_night.optimize()
    #print(new_night.summary(sol))
    #save_matlab_model(new_night, "/Users/subasrees/Desktop/RSmodule/September 24/Sep 16, 2024/Upload_Final/September 28/New Folder/Plant RS/new_night.mat")
model=read_sbml_model('/Users/subasrees/Downloads/PlantCoreModel.sbml')
#print(model.groups)
k=[]
#print(k.type)
for i in model.groups.get_by_id('CALVIN-PWY').members:
   j=i.id
   k.append(j)
print(k)
